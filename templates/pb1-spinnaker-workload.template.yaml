AWSTemplateFormatVersion: "2010-09-09"
Description: "deploy an example workload into an existing kubernetes cluster"
Metadata: { cfn-lint: { config: { ignore_checks: [E3002] } } }
Parameters:
  KubeClusterName:
    Default: PB-Spin-Cluster
    Description: This is template for installing the Armory Operator
    Type: String
Parameters:
  KeyPairName:
    ConstraintDescription: "Name of an existing EC2 key pair."
    Description: Name of the existing key pair for connecting to your EC2 instance. A key pair consists of a private key and a public key.
    Type: "AWS::EC2::KeyPair::KeyName"
Resources:
  KubeManifestNSSpinnaker:
    Type: "AWSQS::Kubernetes::Resource"
    Version: '1.0'
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: spinnaker
          labels: 
            name: spinnaker      
  KubeManifestSpinnakerSecrets:
    Type: "AWSQS::Kubernetes::Resource"
    Metadata: { cfn-lint: { config: { ignore_checks: [E3002] } } }
    Properties:
      ClusterName: !Ref KubeClusterName
      Namespace: "spinnaker"
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: v1
        data:
          aws-secret-key: eHh4
          aws-session-token: eHh4
          bitbucket-password: eHh4
          cf-password: eHh4
          clouddriver-keystore-password: Y2hhbmdlaXQ=
          datadog-apikey: eHh4
          datadog-appkey: eHh4
          dinghy-key-password: cGFzc3dvcmQ=
          echo-keystore-password: Y2hhbmdlaXQ=
          fiat-keystore-password: Y2hhbmdlaXQ=
          front50-keystore-password: Y2hhbmdlaXQ=
          gate-keystore-password: Y2hhbmdlaXQ=
          git-https-password: eHh4
          github-oauth-token: eHh4
          github-password: eHh4
          github-token: eHh4
          gitlab-token: eHh4
          googleOauthClientId: Y2hhbmdlbWU=
          googleOauthClientSecret: Y2hhbmdlbWU=
          grafanaDefaultPassword: YWRtaW4=
          grafanaDefaultUser: YWRtaW4=
          helm-token: eHh4
          http-password: eHh4
          igor-keystore-password: Y2hhbmdlaXQ=
          jenkins-token: eHh4
          kayenta-keystore-password: Y2hhbmdlaXQ=
          minioAccessKey: Y2hhbmdlbWU=
          mysqlCdMigratePassword: Y2hhbmdlbWU=
          mysqlCdPassword: Y2hhbmdlbWU=
          mysqlF50MigratePassword: Y2hhbmdlbWU=
          mysqlF50Password: Y2hhbmdlbWU=
          mysqlOrcaMigratePassword: Y2hhbmdlbWU=
          mysqlOrcaPassword: Y2hhbmdlbWU=
          mysqlRootPassword: Y2hhbmdlbWU=
          oauth-client-secret: eHh4
          orca-keystore-password: Y2hhbmdlaXQ=
          prometheus-password: eHh4
          redis-password: eHh4
          rosco-keystore-password: Y2hhbmdlaXQ=
          saml-keystore-pwd: eHh4
          secretfile-example: U2FtcGxlIHNlY3JldCBmaWxl
          slack-token: eHh4
          ssh-pk-passphrase: eHh4
          terraformer-key-password: cGFzc3dvcmQ=
          tlsKeyStorePassword: Y2hhbmdlbWU=
          twilio-token: eHh4
          vaultToken: eHh4
        kind: Secret
        metadata:
          creationTimestamp: null
          name: spin-secrets
          namespace: spinnaker
    DependsOn: "KubeManifestNSSpinnaker"
  KubeManifestSpinSA:
    Type: "AWSQS::Kubernetes::Resource"
    Metadata: { cfn-lint: { config: { ignore_checks: [E3002] } } }
    Properties:
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: spin-cluster-role
        rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - ingresses/status
          - endpoints
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - services
          - services/finalizers
          - events
          - configmaps
          - secrets
          - namespaces
          - ingresses
          - jobs
          verbs:
          - create
          - get
          - list
          - update
          - watch
          - patch
          - delete
        - apiGroups:
          - batch
          resources:
          - jobs
          verbs:
          - create
          - get
          - list
          - update
          - watch
          - patch
        - apiGroups:
          - apps
          - extensions
          resources:
          - deployments
          - deployments/finalizers
          - deployments/scale
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - create
          - get
          - list
          - update
          - watch
          - patch
          - delete
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - spinnaker.armory.io
          resources:
          - '*'
          - spinnakerservices
          verbs:
          - create
          - get
          - list
          - update
          - watch
          - patch
        - apiGroups:
          - admissionregistration.k8s.io
          resources:
          - validatingwebhookconfigurations
          verbs:
          - '*'
        ---
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: spin-sa
        ---
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: spin-cluster-role-binding
        subjects:
          - kind: ServiceAccount
            name: spin-sa
            namespace: spinnaker
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: spin-cluster-role
    DependsOn: "KubeManifestSpinnakerSecrets"
  